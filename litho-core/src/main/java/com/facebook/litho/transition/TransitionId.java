/*
 * Copyright 2018-present Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.facebook.litho.transition;

import androidx.annotation.IntDef;

import com.facebook.litho.InternalNode;
import com.facebook.litho.mount.MountItem;
import com.facebook.litho.mount.MountState;
import com.facebook.litho.component.Component;
import com.facebook.litho.component.ComponentTree;
import com.facebook.litho.layout.LayoutOutput;
import com.facebook.litho.layout.LayoutState;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * Represents a unique id used for transitions, that is assigned to {@link LayoutOutput} in {@link
 * LayoutState} based on {@link Component}'s/{@link InternalNode}'s transitionKey and
 * transitionKeyType, later passed on to a {@link MountItem}, and used by {@link MountState} and
 * {@link TransitionManager}
 *
 * @see LayoutState#getTransitionIdForNode(InternalNode)
 */
public class TransitionId {
    @IntDef({Type.GLOBAL, Type.SCOPED, Type.AUTOGENERATED})
    @Retention(RetentionPolicy.SOURCE)
    public @interface Type {
        public int GLOBAL        = 1;
        public int SCOPED        = 2;
        public int AUTOGENERATED = 3;
    }

    public final @Type int mType;

    /**
     * For {@link Type.GLOBAL} is a unique within the {@link ComponentTree} reference. For {@link
     * Type.SCOPED} - a unique within the owner {@link Component} reference. For {@link
     * Type.AUTOGENERATED} - a global key
     *
     * @see Component#getGlobalKey()
     */
    public final String mReference;

    /**
     * The owner's global key IDs of {@link Type.SCOPED} type; {@code null} otherwise
     *
     * @see Component#getGlobalKey()
     */
    public final String mExtraData;

    private final int mHashCode;

    public TransitionId(@Type int type, String reference, String extraData) {
        if (reference == null) {
            throw new IllegalArgumentException("reference can't be null");
        }

        mType = type;
        mReference = reference;
        mExtraData = extraData;

        mHashCode =
            reference.hashCode() * 31 * 31
                + (extraData == null ? 0 : extraData.hashCode()) * 31
                + mType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }

        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        TransitionId that = (TransitionId) o;
        return mType == that.mType
            && (mReference == that.mReference
            || (mReference != null && mReference.equals(that.mReference)))
            && (mExtraData == that.mExtraData
            || (mExtraData != null && mExtraData.equals(that.mExtraData)));
    }

    @Override
    public int hashCode() {
        return mHashCode;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("TransitionId{");
        sb.append("\"").append(mReference).append("\", ");
        switch (mType) {
            case Type.GLOBAL:
                sb.append("GLOBAL");
                break;

            case Type.SCOPED:
                sb.append("SCOPED(").append(mExtraData).append(")");
                break;

            case Type.AUTOGENERATED:
                sb.append("AUTOGENERATED");
                break;
        }
        sb.append("}");
        return sb.toString();
    }
}
